-- Criar o banco de dados (se ainda não existir)
CREATE DATABASE IF NOT EXISTS Steam;
USE Steam;

-- Criar a tabela de desenvolvedores
CREATE TABLE IF NOT EXISTS Developer (
    Developer_ID INT AUTO_INCREMENT PRIMARY KEY,
    Nome VARCHAR(255) NOT NULL UNIQUE
);

INSERT INTO developer (Developer_ID, Nome) VALUES
(1,'Valve'),
(2, 'Re-Logic'),
(3, 'Rockstar Games'),
(4, 'Naughty Dog'),
(5, 'Rockstar North'),
(6, 'Telltale Games'),
(7, 'Playground Games'),
(8, 'MOB Games'),
(9, 'Insomniac Games'),
(10, 'Arrowhead Game Studios'),
(11, 'ConcernedApe'),
(12, 'Bohemia Interactive'),
(13, 'SCS Software'),
(14, 'Bethesda Game Studios'),
(15, 'CD Projekt Red');

-- Criar a tabela de publicadoras
CREATE TABLE IF NOT EXISTS Publisher (
    Publisher_ID INT AUTO_INCREMENT PRIMARY KEY,
    Nome VARCHAR(255) NOT NULL UNIQUE
);

INSERT INTO Publisher (Publisher_ID, Nome) VALUES
(1,'Valve'),
(2, 'Re-Logic'),
(3, 'Rockstar Games'),
(4, 'Sony Interactive Entertainment'),
(5, 'Skybound Games'),
(6, 'Xbox Game Studios'),
(7, 'MOB Games'),
(8, 'ConcernedApe'),
(9, 'Bohemia Interactive'),
(10, 'SCS Software'),
(11, 'Bethesda Softworks'),
(12, 'Electronic Arts'),
(13, 'Ubisoft'),
(14, 'Square Enix'),
(15, 'Bandai Namco Entertainment');

-- Criar a tabela de sistemas suportados
CREATE TABLE IF NOT EXISTS Supported_Systems (
    System_ID INT AUTO_INCREMENT PRIMARY KEY,
    Nome VARCHAR(50) NOT NULL UNIQUE
);

INSERT INTO supported_systems (Nome)
VALUES 
  ('Windows'),
  ('MacOS'),
  ('Linux'),
  ('Windows Vista 1.5'),
  ('Windows 7 1.6'),
  ('Windows 8 1.7'),
  ('Windows 10 1.8'),
  ('Windows 11 1.9'),
  ('Arch Linux'),
  ('CentOS'),
  ('Debian'),
  ('Elementary OS'),
  ('Fedora Linux'),
  ('macOS Sequoia 15.0.1'),
  ('macOS Sonoma 14.7'),
  ('macOS Ventura 13.7'),
  ('macOS Monterey 12.7.6'),
  ('macOS Big Sur 11.7.10');

-- Criar a tabela de tecnologias
CREATE TABLE IF NOT EXISTS Tecnologias (
    Tech_ID INT AUTO_INCREMENT PRIMARY KEY,
    Nome VARCHAR(100) NOT NULL UNIQUE
);

INSERT INTO Tecnologias (Tech_ID, Nome) VALUES
(1, 'Source 2 Engine'),                 -- Counter-Strike 2
(2, 'XNA Framework'),                    -- Terraria
(3, 'RAGE Engine'),                      -- Red Dead Redemption 2 e Grand Theft Auto V
(4, 'Naughty Dog Engine'),               -- The Last Of Us Part II e The Last Of Us Part I
(5, 'Telltale Tool'),                    -- The Walking Dead: The Final Season
(6, 'ForzaTech'),                        -- Forza Horizon 5
(7, 'Unreal Engine 4'),                  -- Poppy Playtime - Chapter 2
(8, 'Insomniac Engine'),                 -- Marvel’s Spider-Man Remastered
(9, 'BITSquid Engine'),                  -- Helldivers™ 2
(10, 'Custom Engine (ConcernedApe)'),    -- Stardew Valley
(11, 'Enfusion Engine'),                 -- DayZ
(12, 'Prism3D Engine'),                  -- Euro Truck Simulator 2
(13, 'Creation Engine'),                 -- The Elder Scrolls V: Skyrim Special Edition
(14, 'Unreal Engine 5'),                 -- Possível para futuros jogos, mas não listado
(15, 'Unity Engine'),                    -- Amplamente usado para jogos diversos
(16, 'Valve Anti-Cheat (VAC)'),         -- Usado em Counter-Strike 2
(17, 'Easy Anti-Cheat (EAC)'),          -- Usado em Helldivers™ 2, Forza Horizon 5, The Last Of Us Part I, DayZ
(18, 'BattlEye Anti-Cheat'),            -- Usado em DayZ, Red Dead Redemption 2, Fortnite
(19, 'Rockstar Advanced Anti-Cheat'),   -- Usado em Red Dead Redemption 2 e Grand Theft Auto V
(20, 'PunkBuster'),                     -- Usado em jogos antigos, mas pode ser adaptado
(21, 'FaceIt Anti-Cheat'),              -- Usado em torneios de Counter-Strike 2
(22, 'Ricochet Anti-Cheat'),            -- Usado em Call of Duty, pode ser implementado em FPS
(23, 'Telltale Engine Security'),       -- Segurança interna usada pela Telltale Games
(24, 'Insomniac Anti-Tamper'),          -- Pode ser implementado em Marvel’s Spider-Man Remastered
(25, 'Denuvo Anti-Tamper'),             -- Utilizado em vários jogos para proteção contra pirataria
(26, 'Arxan Anti-Tamper'),              -- Proteção contra engenharia reversa
(27, 'Hyperion Anti-Cheat'),            -- Nova tecnologia em alguns jogos online
(28, 'Microsoft Defender Game Security'), -- Segurança integrada no Windows para jogos
(29, 'Epic Online Services (EOS) Anti-Cheat'), -- Ferramenta anti-cheat da Epic Games
(30, 'FairFight');                      -- Utilizado em jogos da EA, pode ser implementado em shooters


-- Criar a tabela de tags
CREATE TABLE IF NOT EXISTS Tags (
    Tag_ID INT AUTO_INCREMENT PRIMARY KEY,
    Nome VARCHAR(100) NOT NULL UNIQUE
);

INSERT INTO Tags (Nome)
VALUE ('Horror'),
('Racing'),
('Lego'),
('Crime'),
('Martial arts'),
('War'),
('Boxing'),
('2d'),
('3d'),
('Cartoon'),
('Anime'),
('Pvp'),
('Football(soccer)'),
('Fps'),
('Flight'),
('MmoRpg'),
('Action'),
('Survival'),
('Open World'),
('Multiplayer'),
('Shooter'),
('Zombies'),
('Tactical'),
('Strategy'),
('Adventure'),
('Rpg'),
('Story Rich'),
('Simulation'),
('Farming'),
('Exploration'),
('Crafting'),
('Stealth'),
('Parkour'),
('Hack and Slash'),
('Driving'),
('Co-op'),
('Battle Royale'),
('Third Person'),
('First Person'),
('Fantasy'),
('Sci-Fi'),
('Post-Apocalyptic'),
('Physics'),
('Metroidvania'),
('Cyberpunk');

-- Criar a tabela de jogos
CREATE TABLE IF NOT EXISTS Jogo (
    App_ID INT AUTO_INCREMENT PRIMARY KEY,
    Nome VARCHAR(300) NOT NULL,
    Developer_ID INT,
    Publisher_ID INT,
    Imagem_URL text,
    Last_Record_Update TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    Release_Date DATE,
    FOREIGN KEY (Developer_ID) REFERENCES Developer(Developer_ID) ON DELETE SET NULL,
    FOREIGN KEY (Publisher_ID) REFERENCES Publisher(Publisher_ID) ON DELETE SET NULL
);

USE steam;
INSERT INTO Jogo (App_ID, Nome, Developer_ID, Publisher_ID, Imagem_URL, Release_Date) 
VALUES
(1, 'Counter-Strike 2', 1, 1,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/730/header.jpg?t=1729703045', '2012-08-21'),
(2, 'Terraria', 2, 2,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/105600/header.jpg?t=1731252354', '2011-05-16'), 
(3, 'Red Dead Redemption 2', 3, 3,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/1174180/header.jpg?t=1720558643', '2018-10-26'), 
(4, 'The Last Of Us Part II', 4, 4,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/2531310/header.jpg?t=1737495839', '2020-06-19'), 
(5, 'Grand Theft Auto V', 5, 3,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/271590/header.jpg?t=1737136276', '2015-04-14'), 
(6, 'The Walking Dead: The Final Season', 6, 5,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/866800/header.jpg?t=1729703141', '2018-08-14'), 
(7, 'Forza Horizon 5', 7, 6,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/1551360/header.jpg?t=1737050285', '2021-11-09'), 
(8, 'Poppy Playtime - Chapter 2', 8, 7,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/1817490/header.jpg?t=1733782699', '2022-05-05'), 
(9, 'The Last Of Us Part I', 4, 4,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/1888930/header.jpg?t=1736371681', '2022-09-02'), 
(10, 'Marvel’s Spider-Man Remastered', 9, 4,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/1817070/header.jpg?t=1725652915', '2022-08-12'), 
(11, 'Helldivers™ 2', 10, 4,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/553850/header_brazilian.jpg?t=1737495569', '2024-09-20'), 
(12, 'Stardew Valley', 11, 8,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/413150/header.jpg?t=1711128146', '2016-02-26'), 
(13, 'DayZ', 12, 9,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/221100/header.jpg?t=1736875642', '2018-12-13'), 
(14, 'Euro Truck Simulator 2', 13, 10,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/227300/header.jpg?t=1735901402', '2012-10-19'),
(15,'The Elder Scrolls V: Skyrim Special Edition',14,11,'https://shared.fastly.steamstatic.com/store_item_assets/steam/apps/489830/header.jpg?t=1721923149','2016-10-28');

SELECT 
    jogo.App_ID, 
    jogo.Nome, 
    developer.Nome AS Developer_Nome, 
    publisher.Nome AS Publisher_Nome, 
    jogo.Last_Record_Update, 
    jogo.Release_Date
FROM 
    Jogo
JOIN 
    Developer ON Jogo.Developer_ID = Developer.Developer_ID
JOIN 
    Publisher ON Jogo.Publisher_ID = Publisher.Publisher_ID
ORDER BY
	jogo.App_ID Asc;

-- Criar a tabela de relacionamento entre jogos e sistemas suportados
CREATE TABLE IF NOT EXISTS Jogo_Supported_Systems (
    App_ID INT,
    System_ID INT,
    PRIMARY KEY (App_ID, System_ID),
    FOREIGN KEY (App_ID) REFERENCES Jogo(App_ID) ON DELETE CASCADE,
    FOREIGN KEY (System_ID) REFERENCES Supported_Systems(System_ID) ON DELETE CASCADE
);

-- Associando sistemas operacionais aos jogos
INSERT INTO Jogo_Supported_Systems (App_ID, System_ID)
VALUES
  -- Counter-Strike 2
  (1, 1),  -- Windows
  (1, 7),  -- Windows 10
  (1, 8),  -- Windows 11
  (1, 9),  -- Arch Linux

  -- Terraria
  (2, 1),  -- Windows
  (2, 2),  -- MacOS
  (2, 3),  -- Linux
  (2, 7),  -- Windows 10
  (2, 8),  -- Windows 11

  -- Red Dead Redemption 2
  (3, 1),  -- Windows
  (3, 7),  -- Windows 10
  (3, 8),  -- Windows 11

  -- The Last Of Us Part II
  (4, 1),  -- Windows
  (4, 7),  -- Windows 10
  (4, 8),  -- Windows 11

  -- Grand Theft Auto V
  (5, 1),  -- Windows
  (5, 7),  -- Windows 10
  (5, 8),  -- Windows 11
  (5, 9),  -- Arch Linux

  -- The Walking Dead: The Final Season
  (6, 1),  -- Windows
  (6, 7),  -- Windows 10
  (6, 8),  -- Windows 11

  -- Forza Horizon 5
  (7, 1),  -- Windows
  (7, 7),  -- Windows 10
  (7, 8),  -- Windows 11

  -- Poppy Playtime - Chapter 2
  (8, 1),  -- Windows
  (8, 2),  -- MacOS
  (8, 7),  -- Windows 10
  (8, 8),  -- Windows 11

  -- The Last Of Us Part I
  (9, 1),  -- Windows
  (9, 7),  -- Windows 10
  (9, 8),  -- Windows 11

  -- Marvel’s Spider-Man Remastered
  (10, 1),  -- Windows
  (10, 7),  -- Windows 10
  (10, 8),  -- Windows 11

  -- Helldivers™ 2
  (11, 1),  -- Windows
  (11, 7),  -- Windows 10
  (11, 8),  -- Windows 11
  (11, 9),  -- Arch Linux

  -- Stardew Valley
  (12, 1),  -- Windows
  (12, 2),  -- MacOS
  (12, 3),  -- Linux
  (12, 7),  -- Windows 10
  (12, 8),  -- Windows 11

  -- DayZ
  (13, 1),  -- Windows
  (13, 7),  -- Windows 10
  (13, 8),  -- Windows 11

  -- Euro Truck Simulator 2
  (14, 1),  -- Windows
  (14, 7),  -- Windows 10
  (14, 8),  -- Windows 11

  -- The Elder Scrolls V: Skyrim Special Edition
  (15, 1),  -- Windows
  (15, 7),  -- Windows 10
  (15, 8),  -- Windows 11
  (15, 9),  -- Arch Linux
  (15, 2);  -- MacOS

SELECT 
    jogo.Nome AS Nome_Jogo,
    GROUP_CONCAT(supported_systems.Nome ORDER BY supported_systems.Nome ASC) AS Sistemas_Suportados
FROM 
    Jogo
JOIN 
    Jogo_Supported_Systems jss ON jogo.App_ID = jss.App_ID
JOIN 
    Supported_Systems supported_systems ON jss.System_ID = supported_systems.System_ID
GROUP BY 
    jogo.App_ID;

-- Criar a tabela de relacionamento entre jogos e tecnologias
CREATE TABLE IF NOT EXISTS Jogo_Tecnologias (
    App_ID INT,
    Tech_ID INT,
    PRIMARY KEY (App_ID, Tech_ID),
    FOREIGN KEY (App_ID) REFERENCES Jogo(App_ID) ON DELETE CASCADE,
    FOREIGN KEY (Tech_ID) REFERENCES Tecnologias(Tech_ID) ON DELETE CASCADE
);

INSERT INTO Jogo_Tecnologias (App_ID, Tech_ID) VALUES
-- Counter-Strike 2
(1, 1), -- Source 2 Engine
(1, 16), -- Valve Anti-Cheat (VAC)
(1, 21), -- FaceIt Anti-Cheat

-- Terraria
(2, 2), -- XNA Framework
(2, 15), -- Unity Engine (parcialmente usado)

-- Red Dead Redemption 2
(3, 3), -- RAGE Engine
(3, 18), -- BattlEye Anti-Cheat
(3, 19), -- Rockstar Advanced Anti-Cheat

-- The Last Of Us Part II
(4, 4), -- Naughty Dog Engine
(4, 17), -- Easy Anti-Cheat (EAC)

-- Grand Theft Auto V
(5, 3), -- RAGE Engine
(5, 19), -- Rockstar Advanced Anti-Cheat

-- The Walking Dead: The Final Season
(6, 5), -- Telltale Tool
(6, 23), -- Telltale Engine Security

-- Forza Horizon 5
(7, 6), -- ForzaTech
(7, 17), -- Easy Anti-Cheat (EAC)

-- Poppy Playtime - Chapter 2
(8, 7), -- Unreal Engine 4
(8, 15), -- Unity Engine (misturado no desenvolvimento)

-- The Last Of Us Part I
(9, 4), -- Naughty Dog Engine
(9, 17), -- Easy Anti-Cheat (EAC)

-- Marvel’s Spider-Man Remastered
(10, 8), -- Insomniac Engine
(10, 24), -- Insomniac Anti-Tamper

-- Helldivers™ 2
(11, 9), -- BITSquid Engine
(11, 17), -- Easy Anti-Cheat (EAC)

-- Stardew Valley
(12, 10), -- Custom Engine (ConcernedApe)
(12, 15), -- Unity Engine (parcialmente)

-- DayZ
(13, 11), -- Enfusion Engine
(13, 17), -- Easy Anti-Cheat (EAC)
(13, 18), -- BattlEye Anti-Cheat

-- Euro Truck Simulator 2
(14, 12), -- Prism3D Engine

-- The Elder Scrolls V: Skyrim Special Edition
(15, 13), -- Creation Engine
(15, 25); -- Denuvo Anti-Tamper

SELECT 
    jogo.Nome AS Jogo_Nome,
    GROUP_CONCAT(tecnologias.Nome ORDER BY tecnologias.Nome ASC) AS Tecnologias_Associadas
FROM 
    Jogo
JOIN 
    Jogo_Tecnologias jt ON jogo.App_ID = jt.App_ID
JOIN 
    Tecnologias tecnologias ON jt.Tech_ID = tecnologias.Tech_ID
GROUP BY 
    jogo.App_ID;

-- Criar a tabela de relacionamento entre jogos e tags
CREATE TABLE IF NOT EXISTS Jogo_Tags (
    App_ID INT,
    Tag_ID INT,
    PRIMARY KEY (App_ID, Tag_ID),
    FOREIGN KEY (App_ID) REFERENCES Jogo(App_ID) ON DELETE CASCADE,
    FOREIGN KEY (Tag_ID) REFERENCES Tags(Tag_ID) ON DELETE CASCADE);
    
    INSERT INTO Jogo_Tags (App_ID, Tag_ID)
VALUES 
-- Counter-Strike 2
(1, 14),  -- Fps
(1, 21),  -- Shooter
(1, 20),  -- Multiplayer
(1, 23),  -- Tactical

-- Terraria
(2, 8),   -- 2d
(2, 18),  -- Survival
(2, 30),  -- Exploration
(2, 31),  -- Crafting

-- Red Dead Redemption 2
(3, 19),  -- Open World
(3, 27),  -- Story Rich
(3, 25),  -- Adventure
(3, 26),  -- Rpg

-- The Last Of Us Part II
(4, 18),  -- Survival
(4, 27),  -- Story Rich
(4, 25),  -- Adventure
(4, 32),  -- Stealth

-- Grand Theft Auto V
(5, 19),  -- Open World
(5, 4),   -- Crime
(5, 35),  -- Driving
(5, 20),  -- Multiplayer

-- The Walking Dead: The Final Season
(6, 27),  -- Story Rich
(6, 25),  -- Adventure
(6, 22),  -- Zombies

-- Forza Horizon 5
(7, 2),   -- Racing
(7, 19),  -- Open World
(7, 20),  -- Multiplayer

-- Poppy Playtime - Chapter 2
(8, 1),   -- Horror
(8, 30),  -- Exploration
(8, 25),  -- Adventure

-- The Last Of Us Part I
(9, 18),  -- Survival
(9, 27),  -- Story Rich
(9, 25),  -- Adventure
(9, 32),  -- Stealth

-- Marvel’s Spider-Man Remastered
(10, 17),  -- Action
(10, 19),  -- Open World
(10, 10),  -- Cartoon
(10, 34),  -- Hack and Slash

-- Helldivers™ 2
(11, 21),  -- Shooter
(11, 20),  -- Multiplayer
(11, 36),  -- Co-op
(11, 41),  -- Sci-Fi

-- Stardew Valley
(12, 29),  -- Farming
(12, 28),  -- Simulation
(12, 8),   -- 2d
(12, 26),  -- Rpg

-- DayZ
(13, 18),  -- Survival
(13, 22),  -- Zombies
(13, 19),  -- Open World
(13, 20),  -- Multiplayer

-- Euro Truck Simulator 2
(14, 35),  -- Driving
(14, 28),  -- Simulation
(14, 19),  -- Open World

-- The Elder Scrolls V: Skyrim Special Edition
(15, 19),  -- Open World
(15, 26),  -- Rpg
(15, 40),  -- Fantasy
(15, 27),  -- Story Rich
(15, 25);  -- Adventure

SELECT 
    jogo.Nome AS Jogo_Nome,
    GROUP_CONCAT(tags.Nome ORDER BY tags.Nome ASC) AS Tags_Associadas
FROM 
    Jogo
JOIN 
    Jogo_Tags jt ON jogo.App_ID = jt.App_ID
JOIN 
    Tags tags ON jt.Tag_ID = tags.Tag_ID
GROUP BY 
    jogo.App_ID;

use steam;
-- tabela usuario
create table usuario(
ID_Usuario int auto_increment not null Primary Key,
Nome varchar(80) not null,
Nick_name varchar(100) not null,
Email varchar(80) not null,
Senha varchar(10)
);

INSERT INTO usuario (ID_Usuario, Nome, Nick_name, Email, Senha)
VALUES 
  (1,'Matheus Henrinque', 'Star_Ghost0408', 'matheus.henrinque@gmail.com', 'senha123'),
  (2,'Thallys Malaquias', 'Thallys_San', 'thallys.malaquias@hotmail.com', 'senha456'),
  (3,'Davidson Fernandes', 'Fdavidson91', 'davidson.fernandes@yahoo.com', 'senha789'),
  (4,'Guilherme Rocha', '919Calabreso', 'guilherme.rocha@outlook.com', 'senha101'),
  (5,'Ryan Gabriel', 'Camisinho', 'ryan.gabriel@gmail.com', 'senha202'),
  (6,'Rafael Pereira', 'RoubeiTeuLoot', 'rafael.pereira@live.com', 'senha303'),
  (7,'Pedro Henrique', 'TropeceiNoHDMI', 'pedro.henrique@gmail.com', 'senha404'),
  (8,'Marcos Silva', 'LagMental200ms9', 'marcos.silva@yahoo.com', 'senha505'),
  (9,'João Souza', 'SeuModemCaiu', 'joao.souza@hotmail.com', 'senha606'),
  (10,'Bruno Lima', 'BalaPerdidaVIP', 'bruno.lima@live.com', 'senha707'),
  (11,'André Almeida', 'AltF4ProPlayer', 'andre.almeida@gmail.com', 'senha808'),
  (12,'Eduardo Campos', 'PuloErrado123', 'eduardo.campos@yahoo.com', 'senha909'),
  (13,'Fernanda Costa', 'Fedora Linux', 'fernanda.costa@gmail.com', 'senha1010'),
  (14,'Tiago Rodrigues', 'TioDoWiFiGratis', 'tiago.rodrigues@hotmail.com', 'senha1111'),
  (15,'Renan Faria', 'HeadshotNaSorte', 'renan.faria@yahoo.com', 'senha1212'),
  (16,'Gustavo Lopes', 'CamperDoAno', 'gustavo.lopes@gmail.com', 'senha1313'),
  (17,'Ana Paula', 'NaFilaDoRespawn', 'ana.paula@hotmail.com', 'senha1414'),
  (18,'Caio Matos', 'CtrlAltTilt', 'caio.matos@yahoo.com', 'senha1515');

-- tabela badges
create table badges(
ID_Badge int auto_increment not null Primary Key,
nome varchar(200),
imagem text);

insert into Badges (ID_Badge,nome,imagem)
values 
(1,'Community Contributor','https://community.cloudflare.steamstatic.com/public/images/badges/48_communitycontributor/1_80.png'),
(2,'2022 Steam Cup','https://community.cloudflare.steamstatic.com/public/images/badges/generic/RacingSale2022_80.png'),
(3,'Steam Awards Nomination Committee 2018','https://community.cloudflare.steamstatic.com/public/images/badges/30_steamawardnominations/level04_80.png'),
(4,'Steam Community Moderator','https://community.cloudflare.steamstatic.com/public/images/badges/generic/RetiredModerator_80.png'),
(5,'Community Ambassador','https://community.cloudflare.steamstatic.com/public/images/badges/01_community/community03_80.png'),
(6,'Steam Summer Camp','https://community.cloudflare.steamstatic.com/public/images/badges/05_summer2011/tickets80.png'),
(7,'The Potato Sack','https://community.cloudflare.steamstatic.com/public/images/badges/03_potato/potato03_80.png'),
(8,'Owned Games','https://community.cloudflare.steamstatic.com/public/images/badges/13_gamecollector/40000_80.png'),
(9,'The Paranormal Professor','https://community.cloudflare.steamstatic.com/public/images/badges/51_summer2021/54.png'),
(10,'The Ghost Detective','https://community.cloudflare.steamstatic.com/public/images/badges/51_summer2021/55.png'),
(11,'Salien','https://community.cloudflare.steamstatic.com/public/images/badges/29_salien/6_80.png'),
(12,'Red Herring','https://community.cloudflare.steamstatic.com/public/images/badges/24_winter2015_arg_red_herring/red_herring.png'),
(13,'Steamworks Developer','https://community.cloudflare.steamstatic.com/public/images/badges/generic/GameDeveloper_80.png'),
(14,'Years of Service','https://community.cloudflare.steamstatic.com/public/images/badges/02_years/steamyears20anni_80.png'),
(15,'Steam Holiday Sale 2011','https://community.cloudflare.steamstatic.com/public/images/badges/06_winter2011/coal03_80.png');

-- tabela usuario badge
create table usuario_badge(
ID_Usuario int,
ID_Badge int,
Foreign key (ID_Usuario) references usuario(ID_Usuario),
Foreign key (ID_Badge) references badges(ID_Badge)
);

INSERT INTO usuario_badge (ID_Usuario, ID_Badge) VALUES
(1, 3), (1, 7), (1, 10),
(2, 1), (2, 5), (2, 8), (2, 11),
(3, 2), (3, 4), (3, 9), (3, 12),
(4, 6), (4, 14), (4, 15),
(5, 3), (5, 8),
(6, 1), (6, 10), (6, 13),
(7, 5), (7, 7), (7, 9), (7, 14),
(8, 2), (8, 4), (8, 6), (8, 11),
(9, 1), (9, 3), (9, 12),
(10, 5), (10, 8), (10, 10), (10, 15),
(11, 2), (11, 7), (11, 9),
(12, 4), (12, 6), (12, 14),
(13, 1), (13, 5), (13, 13),
(14, 3), (14, 8), (14, 11),
(15, 2), (15, 9), (15, 12), (15, 14),
(16, 4), (16, 6), (16, 10),
(17, 1), (17, 3), (17, 7), (17, 13),
(18, 5), (18, 8), (18, 12);

SELECT 
    usuario.Nome AS Usuario_Nome,
    GROUP_CONCAT(badges.Nome ORDER BY badges.Nome ASC) AS Badges_Obtidas
FROM 
    usuario
JOIN 
    usuario_badge ub ON usuario.ID_Usuario = ub.ID_Usuario
JOIN 
    badges ON ub.ID_Badge = badges.ID_Badge
GROUP BY 
    usuario.ID_Usuario;

-- tabela biblioteca
create table biblioteca(
App_ID INT,
ID_Usuario int,
foreign key(App_ID) references Jogo(App_ID),
foreign key(ID_Usuario) references usuario(ID_Usuario)
);

insert into biblioteca(ID_Usuario,App_ID) values
(1,1),
(1,11),
(2,1),
(2,2),
(2,3),
(2,5),
(2,12),
(2,14),
(2,15), 
(3,1),
(3,5),
(3,6),
(3,8),
(4,1),
(5,1),
(5,5),
(6,3),
(6,4),
(6,6),
(6,10),   
(7,1),
(7,11),
(7,13),
(7,14),
(7,15), 
(8,2),
(8,8),
(8,12),
(8,14),
(9,1),
(9,4),
(9,9),
(9,11),
(10,10), 
(10,11),
(10,12),
(10,13),
(10,14),
(10,15),
(11,1),
(11,2),
(11,3),
(11,4),
(11,5),
(11,6), 
(12,7),
(12,9),
(12,10),
(12,11),
(12,14), 
(13,4),
(13,9),
(13,10),
(13,11), 
(14,14),
(15,1),
(15,2),
(15,3),
(15,4),
(15,5),
(15,6),
(15,7),
(15,8),
(15,9),
(15,10),
(15,11),
(15,12),
(15,13),
(15,14),
(15,15);

SELECT 
    usuario.Nome AS Usuario_Nome,
    GROUP_CONCAT(jogo.Nome ORDER BY jogo.Nome ASC) AS Jogos_Possuidos
FROM 
    usuario
JOIN 
    biblioteca b ON usuario.ID_Usuario = b.ID_Usuario
JOIN 
    jogo ON b.App_ID = jogo.App_ID
GROUP BY 
    usuario.ID_Usuario;


-- tabela amigos
create table amigos(
    ID_usuario1 int,
    ID_usuario2 int,
    primary key (ID_usuario1, ID_usuario2),
    foreign key (ID_usuario1) references usuario(ID_Usuario) on delete cascade,
    foreign key (ID_usuario2) references usuario(ID_Usuario) on delete cascade,
    check (ID_usuario1 <> ID_usuario2) -- Impede um usuário de ser amigo dele mesmo
);

INSERT INTO amigos (ID_usuario1, ID_usuario2) VALUES
(1, 2), (1, 3), (1, 4), (1, 5),
(2, 1), (2, 3), (2, 4), (2, 5),
(3, 1), (3, 2), (3, 4), (3, 5),
(4, 1), (4, 2), (4, 3), (4, 5),
(6, 7), (6, 8), (6, 9), 
(7, 10), (7, 11), 
(8, 12), (8, 13), (8, 14), 
(9, 15), (9, 16), 
(10, 17), (10, 18), 
(11, 12), (11, 13), 
(12, 14), (12, 15), 
(13, 16), (13, 17), 
(14, 18), 
(15, 16), 
(16, 17), (16, 18), 
(17, 18);

SELECT 
    u1.Nome AS Usuario_Nome,
    GROUP_CONCAT(u2.Nome ORDER BY u2.Nome ASC) AS Amigos
FROM 
    amigos
JOIN 
    usuario u1 ON amigos.ID_usuario1 = u1.ID_Usuario
JOIN 
    usuario u2 ON amigos.ID_usuario2 = u2.ID_Usuario
GROUP BY 
    u1.ID_Usuario;

Use steam;
CREATE TABLE IF NOT EXISTS Preco (
    Preco_ID INT AUTO_INCREMENT PRIMARY KEY,
    App_ID INT NOT NULL,
    Preco DECIMAL(10,2) NOT NULL,
    Data_Atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (App_ID) REFERENCES Jogo(App_ID) ON DELETE CASCADE
);

insert into preco (App_ID,Preco)
values
(1,00.00),
(2,32.99),
(3,299.90),
(4,199.90),
(5,82.41),
(6,59.99),
(7,124.50),
(8,20.69),
(9,249.90),
(10,249.90),
(11,199.50),
(12,24.99),
(13,149.99),
(14,61.99),
(15,149.00);
SELECT 
    j.Nome AS Nome_Jogo, 
    p.Preco AS Preco_Jogo,
    p.Data_Atualizacao
FROM Preco p
JOIN Jogo j ON p.App_ID = j.App_ID
ORDER BY j.App_ID;

create table carrinho(
ID_Usuario int,
App_ID int,
Primary key (ID_Usuario, App_ID),
foreign key(App_ID) references Jogo(App_ID),
foreign key(ID_Usuario) references usuario(ID_Usuario)
);

INSERT INTO	carrinho (Id_usuario, App_ID)
VALUES
('1','1'),
('1','11'),
('2','1'),
('2','2'),
('2','3'),
('2','5'),
('2','12'),
('2','14'),
('2','15'),
('3','1'),
('3','5'),
('3','6'),
('3','8'),
('4','1'),
('5','1'),
('5','5'),
('6','3'),
('6','4'),
('6','6'),
('6','10'),
('7','1'),
('7','11'),
('7','13'),
('7','14'),
('7','15'),
('8','2'),
('8','8'),
('8','12'),
('8','14'),
('9','1'),
('9','4'),
('9','9'),
('9','11'),
('10','10'),
('10','11'),
('10','12'),
('10','13'),
('10','14'),
('10','15'),
('11','2'),
('11','3'),
('11','6'),
('12','7'),
('12','9'),
('12','10'),
('12','11'),
('12','14'),
('13','4'),
('13','9'),
('13','10'),
('13','11'),
('14','14'),
('15','1'),
('15','2'),
('15','3'),
('15','14');
SELECT 
    c.ID_Usuario, 
    u.Nome AS Nome_Usuario, 
    GROUP_CONCAT(j.Nome ORDER BY j.Nome ASC SEPARATOR ', ') AS Jogos_Carrinho
FROM carrinho c
JOIN Usuario u ON c.ID_Usuario = u.ID_Usuario
JOIN Jogo j ON c.App_ID = j.App_ID
GROUP BY c.ID_Usuario, u.Nome
ORDER BY c.ID_Usuario;

CREATE TABLE IF NOT EXISTS Compra (
    ID_Compra INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    ID_Usuario INT,
    ID_Jogo INT NOT NULL,  -- Corrigido para referenciar o jogo
    Data_Compra TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Metodo_Pagamento ENUM('Credit Card', 'PIX', 'PayPal', 'Gift Card', 'Crypto'),
    Preco_ID INT NOT NULL,  -- Coluna para linkar o preço
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario),
    FOREIGN KEY (ID_Jogo) REFERENCES Jogo(App_ID),  -- Referência à tabela Jogo
    FOREIGN KEY (Preco_ID) REFERENCES Preco(Preco_ID)  -- Referência à tabela Preco
);

INSERT INTO Compra (ID_Usuario, ID_Jogo, Metodo_Pagamento, Preco_ID) 
VALUES 
(1, 1, NULL, 1),  
(1, 11, 'PIX', 11), 
(2, 1, NULL, 1), 
(2, 2, 'PayPal', 2), 
(2, 3, 'Crypto', 3), 
(2, 5, 'Credit Card', 5), 
(2, 12, 'Credit Card', 12), 
(2, 14, 'PayPal', 14), 
(2, 15, 'PIX', 15),  
(3, 1, NULL, 1), 
(3, 5, 'Crypto', 5), 
(3, 6, 'Credit Card', 6), 
(3, 8, 'PayPal', 8), 
(4, 1, NULL, 1), 
(5, 1, NULL, 1), 
(5, 5, 'PayPal', 5),  
(6, 3, 'PIX', 3),    
(6, 4, 'Credit Card', 4),  
(6, 6, 'Crypto', 6),  
(6, 10, 'PIX', 10),   
(7, 1, NULL, 1),  
(7, 11, 'PayPal', 11),  
(7, 13, 'Crypto', 13),  
(7, 14, 'PayPal', 14),  
(7, 15, 'Crypto', 15),  
(8, 2, 'PIX', 2),   
(8, 8, 'PIX', 8),   
(8, 12, 'PayPal', 12),  
(8, 14, 'Crypto', 14),  
(9, 1, NULL, 1),  
(9, 4, 'Crypto', 4),  
(9, 9, 'PayPal', 9),  
(9, 11, 'PIX', 11),  
(10, 10, 'Credit Card', 10),  
(10, 11, 'PayPal', 11),  
(10, 12, 'PIX', 12),  
(10, 13, 'PIX', 13),  
(10, 14, 'PIX', 14),  
(10, 15, 'PIX', 15),  
(11, 1, NULL, 1),  
(11, 2, 'PIX', 2),  
(11, 3, 'PIX', 3),  
(11, 4, 'Credit Card', 4),  
(11, 5, 'Credit Card', 5),  
(11, 6, 'Credit Card', 6),  
(12, 7, 'Credit Card', 7),  
(12, 9, 'PayPal', 9),  
(12, 10, 'Crypto', 10),  
(12, 11, 'Credit Card',11),  
(12, 14, 'PIX', 14),  
(13, 4, 'PIX', 4),  
(13, 9, 'Credit Card', 9),  
(13, 10, 'Credit Card', 10),  
(13, 11, 'Credit Card', 11),  
(14, 14, 'Credit Card', 14),  
(15, 1, NULL, 1),  
(15, 2, 'PIX', 2),  
(15, 3, 'Credit Card', 3),  
(15, 4, 'PIX', 14),  
(15, 5, 'Credit Card', 5),  
(15, 6, 'Credit Card', 6),  
(15, 7, 'Credit Card', 7),  
(15, 8, 'PIX', 8),  
(15, 9, 'PIX', 9),  
(15, 10, 'PIX', 10),  
(15, 11, 'Credit Card', 11),  
(15, 12, 'PayPal', 12),  
(15, 13, 'PayPal', 13),  
(15, 14, 'PayPal', 14),  
(15, 15, 'PayPal', 15);
SELECT 
    c.ID_Compra, 
    c.ID_Usuario, 
    c.Data_Compra, 
    c.Metodo_Pagamento, 
    j.Nome AS Nome_do_Jogo, 
    p.Preco AS Preco_do_Jogo
FROM Compra c
JOIN Jogo j ON c.ID_Jogo = j.App_ID
JOIN Preco p ON c.Preco_ID = p.Preco_ID;

CREATE TABLE Transacao (
    Transaction_ID INT AUTO_INCREMENT PRIMARY KEY,
    Game_ID INT NOT NULL,
    Distributor_ID INT NOT NULL,
    Preco_ID INT NOT NULL,  -- Nova coluna para linkar o preço
    Transaction_Type ENUM('Licensing', 'Revenue Share', 'Other') NOT NULL,
    Transaction_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (Game_ID) REFERENCES Jogo(App_ID),
    FOREIGN KEY (Distributor_ID) REFERENCES Publisher(Publisher_ID),
    FOREIGN KEY (Preco_ID) REFERENCES Preco(Preco_ID)  -- Referência ao Preco_ID da tabela Preco
);

INSERT INTO Transacao (Game_ID, Distributor_ID, Preco_ID, Transaction_Type)
VALUES
(1, 1, 1, 'Licensing'),               -- Counter-Strike 2
(2, 2, 2, 'Revenue Share'),           -- Terraria
(3, 3, 3, 'Other'),                   -- Red Dead Redemption 2
(4, 4, 4, 'Licensing'),               -- The Last Of Us Part II
(5, 3, 5, 'Revenue Share'),           -- Grand Theft Auto V
(6, 5, 6, 'Other'),                   -- The Walking Dead: The Final Season
(7, 6, 7, 'Licensing'),               -- Forza Horizon 5
(8, 7, 8, 'Revenue Share'),           -- Poppy Playtime - Chapter 2
(9, 4, 9, 'Licensing'),               -- The Last Of Us Part I
(10, 4, 10, 'Other'),                 -- Marvel’s Spider-Man Remastered
(11, 4, 11, 'Revenue Share'),         -- Helldivers™ 2
(12, 8, 12, 'Licensing'),             -- Stardew Valley
(13, 9, 13, 'Other'),                 -- DayZ
(14, 10, 14, 'Revenue Share'),        -- Euro Truck Simulator 2
(15, 11, 15, 'Licensing');            -- The Elder Scrolls V: Skyrim Special Edition
SELECT 
    t.Transaction_ID, 
    j.Nome AS Nome_Jogo, 
    p.Nome AS Nome_Distribuidor, 
    pr.Preco AS Preco_Jogo, 
    t.Transaction_Type, 
    t.Transaction_Date
FROM Transacao t
JOIN Jogo j ON t.Game_ID = j.App_ID
JOIN Publisher p ON t.Distributor_ID = p.Publisher_ID
JOIN Preco pr ON t.Preco_ID = pr.Preco_ID
ORDER BY t.Transaction_Date DESC;

CREATE TABLE IF NOT EXISTS Avaliacao (
    ID_Avaliacao INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    ID_Usuario INT NOT NULL,           -- ID do usuário que fez a avaliação
    App_ID INT NOT NULL,              -- ID do jogo avaliado
    Nota INT NOT NULL CHECK (Nota BETWEEN 1 AND 10),  -- Nota de 1 a 10
    Comentario TEXT,                   -- Comentário opcional do usuário
    Data_Avaliacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  -- Data da avaliação
    FOREIGN KEY (ID_Usuario) REFERENCES Usuario(ID_Usuario),  -- Chave estrangeira para usuário
    FOREIGN KEY (App_ID) REFERENCES Jogo(App_ID),              -- Chave estrangeira para jogo
    CONSTRAINT unique_user_game UNIQUE (ID_Usuario, App_ID)    -- Restrição para garantir que um usuário não possa avaliar o mesmo jogo mais de uma vez
);

INSERT INTO Avaliacao (ID_Usuario, App_ID, Nota, Comentario) VALUES 
(1, 11, 9, 'Jogo incrível! Adorei a jogabilidade e gráficos.'),
(2, 2, 7, 'Bom jogo, mas poderia ser melhor em termos de história.'),
(3, 3, 8, 'Ótima experiência, valeu a pena jogar.'),
(4, 4, 6, 'Jogo mediano, algumas partes são chatas.'),
(5, 5, 10, 'Fantástico! Melhor jogo que já joguei.'),	
(6, 6, 5, 'Não gostei muito, achei repetitivo.'),
(7, 7, 7, 'Diversão garantida, mas com alguns problemas técnicos.'),
(8, 8, 8, 'Jogo bem balanceado e divertido.'),
(9, 9, 9, 'Adorei! Jogabilidade fluida e bem feita.'),
(10, 10, 6, 'Esperava mais, mas ainda assim é bom.'),
(11, 1, 7, 'Bom jogo, mas senti falta de algumas funcionalidades.'),
(12, 12, 10, 'Perfeito! Não tenho nada a reclamar.'),
(13, 13, 8, 'Muito bom, mas precisa de algumas melhorias.'),
(14, 14, 9, 'Quase perfeito, pequenos detalhes incomodam.'),
(15, 15, 7, 'Jogo legal, mas pode ser cansativo após um tempo.');
SELECT 
    a.ID_Avaliacao, 
    u.Nome AS Nome_Usuario, 
    a.Nota, 
    a.Comentario, 
    a.Data_Avaliacao
FROM Avaliacao a
JOIN Usuario u ON a.ID_Usuario = u.ID_Usuario
JOIN Jogo j ON a.App_ID = j.App_ID
WHERE a.App_ID = 11;

SELECT 
    j.Nome AS App_ID, 
    AVG(a.Nota) AS Media_Avaliacao
FROM Avaliacao a
JOIN Jogo j ON a.App_ID = j.App_ID
WHERE a.App_ID = 11
GROUP BY j.Nome;
